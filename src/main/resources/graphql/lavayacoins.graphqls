input SaveStoreInput{
    name:String
    location:CoordinatesInput!
    accessToken:String!
}

input CreateCustomerUserInput{
    username:String!
    password:String!
}

input CreateAdminUserInput{
    username:String!
    password:String!
    accessToken:String!
    authorities:[Authority]!
}

input LoginCustomerUserInput{
    username:String!
    password:String!
}
input LoginAdminUserInput{
    username:String!
    password:String!
}

input CoordinatesInput{
    latitude:Float!
    longitude:Float!
}

type Coordinates{
    latitude:Float!
    longitude:Float!
}

type Store{
    id:String!
    name:String
    coordinates:Coordinates!
}

type CustomerUser{
    username:String!
    password:String!
}

type AdminUser{
    username:String!
    password:String!
    adminAuthorities :[AdminAuthority]!
}

type AdminAuthority{
    authority: Authority!,
    creatorUsername: String!,
    reason: String
}

type CustomerUserCredentials{
    user:CustomerUser!
    credentials:Credentials!
}

type LoginAdminUserError{
    error:LoginAdminErrorCause!
}

type Credentials{
    accessToken:String!
    refreshToken:String!
}

type SaveStoreErrorInvalidAuthorities {
    neededAuthorities:[Authority]!
    sendAuthorities:[Authority]!
}

type SaveStoreSuccess {
    store:Store!
}

type LoginAdminSuccess{
    user:AdminUser!
    credentials:Credentials!
}

type CreateAdminSuccess{
    user:AdminUser!
    credentials:Credentials!
}

type CreateAdminUserError{
    error:CreateAdminErrorCause!
}

enum Authority{
    ADMIN_STORES,
    SEND_TIPS
}

enum LoginAdminErrorCause{
    PASSWORD_MISMATCH,
    USER_NOT_EXIST,
    UNKNOWN
}

enum CreateAdminErrorCause{
    INVALID_AUTHORITIES,
    USER_ALREADY_EXIST
}

union SaveStoreResult = SaveStoreErrorInvalidAuthorities | SaveStoreSuccess

union LoginAdminResult = LoginAdminUserError | LoginAdminSuccess

union CreateAdminResult = CreateAdminSuccess | CreateAdminUserError

type Query {
    findAllStores:[Store]!
}

type Mutation {
    loginAdminUser(input:LoginCustomerUserInput!):LoginAdminResult!
    createAdminUser(input:CreateAdminUserInput!):CreateAdminResult!
    loginCustomerUser(input:LoginAdminUserInput!):CustomerUserCredentials
    createCustomerUser(input:CreateCustomerUserInput!):CustomerUserCredentials
    saveStore(input:SaveStoreInput!) :SaveStoreResult!
}