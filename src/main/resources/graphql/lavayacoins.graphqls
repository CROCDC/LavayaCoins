input SaveStoreInput{
    store:StoreInput!
    accessToken:String!
}

input SaveAllStoresInput{
    stores:[StoreInput]!
    accessToken:String
}

input StoreInput{
    name:String
    coordinates:CoordinatesInput!
}

input CreateCustomerUserInput{
    username:String!
    password:String!
}

input CreateAdminUserInput{
    username:String!
    password:String!
    accessToken:String!
    authorities:[Authority]!
}

input LoginCustomerUserInput{
    username:String!
    password:String!
}
input LoginAdminUserInput{
    username:String!
    password:String!
}

input CoordinatesInput{
    latitude:Float!
    longitude:Float!
}

input DeleteStoreByIdInput{
    id:String!
    accessToken:String!
}

type Coordinates{
    latitude:Float!
    longitude:Float!
}

type Store{
    id:String!
    name:String
    coordinates:Coordinates!
}

type CustomerUser{
    username:String!
    password:String!
}

type AdminUser{
    username:String!
    password:String!
    authorities :[Authority]!
}

type LoginAdminError{
    error:LoginAdminErrorCause!
}

type Credentials{
    accessToken:String!
    refreshToken:String!
}

type SaveStoreErrorInvalidAuthorities {
    neededAuthorities:[Authority]!
    sendAuthorities:[Authority]!
}

type SaveStoreSuccess {
    store:Store!
}

type LoginAdminSuccess{
    user:AdminUser!
    credentials:Credentials!
}

type CreateAdminSuccess{
    user:AdminUser!
    credentials:Credentials!
}

type CreateAdminError{
    error:CreateAdminErrorCause!
}

type LoginCustomerError{
    error:LoginCustomerErrorCause!
}

type LoginCustomerSuccess{
    user:CustomerUser!
    credentials:Credentials!
}

type CreateCustomerError{
    error:CreateCustomerErrorCause!
}

type CreateCustomerSuccess{
    user:CustomerUser!
    credentials:Credentials!
}

type SaveStoresSuccess{
    stores:[Store]!
}

type DeleteStoreSuccess{
    store:Store!
}

type DeleteStoreNotExist

type DeleteStoreInvalidAuthorities{
    neededAuthorities:[Authority]!
    sendAuthorities:[Authority]!
}

enum Authority{
    ADMIN_STORES,
    SEND_TIPS
}

enum LoginAdminErrorCause{
    PASSWORD_MISMATCH,
    USER_NOT_EXIST,
    UNKNOWN
}

enum CreateAdminErrorCause{
    INVALID_AUTHORITIES,
    USER_ALREADY_EXIST
}

enum LoginCustomerErrorCause{
    PASSWORD_MISMATCH,
    USER_NOT_EXIST,
    UNKNOWN
}

enum CreateCustomerErrorCause{
    USER_ALREADY_EXIST
}

union SaveStoreResult = SaveStoreErrorInvalidAuthorities | SaveStoreSuccess

union LoginAdminResult = LoginAdminError | LoginAdminSuccess

union CreateAdminResult = CreateAdminSuccess | CreateAdminError

union LoginCustomerResult = LoginCustomerError | LoginCustomerSuccess

union CreateCustomerResult = CreateCustomerError | CreateCustomerSuccess

union SaveStoresResult = SaveStoresSuccess | SaveStoreErrorInvalidAuthorities

union DeleteStoreResult = DeleteStoreSuccess | DeleteStoreNotExist | DeleteStoreInvalidAuthorities

type Query {
    findAllStores:[Store]!
}

type Mutation {
    loginAdminUser(input:LoginCustomerUserInput!):LoginAdminResult!
    createAdminUser(input:CreateAdminUserInput!):CreateAdminResult!
    loginCustomerUser(input:LoginAdminUserInput!):LoginCustomerResult!
    createCustomerUser(input:CreateCustomerUserInput!):CreateCustomerResult!
    saveStore(input:SaveStoreInput!) :SaveStoreResult!
    saveStores(input:SaveAllStoresInput!):SaveStoresResult
    deleteStoreById(input:DeleteStoreByIdInput):DeleteStoreResult
}